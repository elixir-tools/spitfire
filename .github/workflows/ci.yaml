name: CI
on:
  pull_request:
  push:
    branches: main

jobs:
  repos:
    runs-on: ubuntu-latest
    name: Repos

    strategy:
      fail-fast: false
      matrix:
        repo: 
          - elixir-lang/elixir
          - elixir-ecto/ecto
          - elixir-ecto/ecto_sql
          - phoenixframework/phoenix
          - phoenixframework/phoenix_live_view
          - elixir-tools/next-ls
          - elixir-tools/gen_lsp
          - elixir-tools/spitfire
          - elixir-tools/tableau
          - michalmuskala/jason
          - beam-telemetry/telemetry
          - elixir-plug/plug
          - ericmj/decimal
          - elixir-gettext/gettext
          - rrrene/credo
          - wojtekmach/req
          - bitwalker/timex
          - mtrudel/bandit
          - witchcrafters/witchcraft
          - witchcrafters/type_class
          - witchcrafters/quark
          - oestrich/aino
          - sorentwo/oban
          - ash-project/ash
          - nerves-hub/nerves_hub_web
          - nerves-hub/nerves_hub_link
          - mishka-group/guarded_struct
          - absinthe-graphql/absinthe
          - elixir-wallaby/wallaby
          - livebook-dev/livebook
          - livebook-dev/kino
          - livebook-dev/vega_lite
          - elixir-makeup/makeup

    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v14
        with:
          name: elixir-tools
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/.mise.toml') }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ hashFiles('**/.mise.toml') }}-

      - name: Install Dependencies
        run: nix develop --command bash -c "mix deps.get"
      - name: Clone
        env: 
          GH_TOKEN: ${{ github.token }}
        run: gh repo clone ${{ matrix.repo }} proj

      - name: Test
        run: |
          nix develop --command bash -c "bin/ci.exs ./proj"

  test:
    runs-on: ubuntu-latest
    name: Tests

    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v14
        with:
          name: elixir-tools
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/.mise.toml') }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ hashFiles('**/.mise.toml') }}-

      - name: Install Dependencies
        run: nix develop --command bash -c "mix deps.get"

      - name: Unit Tests
        run: nix develop --command bash -c "mix test"

  lint:
    runs-on: ubuntu-latest
    name: Lint

    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v14
        with:
          name: elixir-tools
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/.mise.toml') }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ hashFiles('**/.mise.toml') }}-

      # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      - name: Restore PLT cache
        uses: actions/cache/restore@v4
        id: plt_cache
        with:
          key: ${{ runner.os }}-mix-${{ hashFiles('**/flake.nix') }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ hashFiles('**/flake.nix') }}-
          path: |
            priv/plts

      - name: Install Dependencies
        run: nix develop --command bash -c "mix deps.get"

      - name: Run Formatter
        run: nix develop --command bash -c "mix format --check-formatted"

      - name: Credo
        run: nix develop --command bash -c "mix credo"

      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: nix develop --command bash -c 'mix dialyzer --plt'

      # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
      # so we separate the cache restore and save steps in case running dialyzer fails.
      - name: Save PLT cache
        uses: actions/cache/save@v4
        if: steps.plt_cache.outputs.cache-hit != 'true'
        id: plt_cache_save
        with:
          key: ${{ runner.os }}-mix-${{ hashFiles('**/flake.nix') }}-${{ hashFiles('**/mix.lock') }}
          path: |
            priv/plts

      - name: Run dialyzer
        run: nix develop --command bash -c 'mix dialyzer --format github'

